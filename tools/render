#!/usr/bin/env python

import os
import shutil
import sys
import tomllib
from dataclasses import dataclass
from pathlib import Path
from string import Template
from typing import Self

HOST_ROOT: Path = Path.home()
REPO_ROOT: Path = Path(__file__).parent.parent
CONFIG_ROOT: Path = REPO_ROOT / "config"

OS_TERMUX = "com.termux" in os.environ.get("PREFIX", "")


@dataclass
class Config:
    host: Path  # relative to home directory
    repo: Path  # relative to `dotfiles/config` directory
    templated: bool

    @classmethod
    def home(
        cls: type[Self],
        host: str,
        repo: str,
        templated: bool = False,
    ) -> Self:
        return cls(
            host=HOST_ROOT / host,
            repo=CONFIG_ROOT / repo,
            templated=templated,
        )


CONFIG_FILES = [
    # Zsh
    Config.home(".zshrc", "zsh/zshrc"),
    Config.home(".zprofile", "zsh/zprofile"),
    # Ssh
    Config.home(".ssh/config", "ssh/config"),
    Config.home(".ssh/authorized_keys", "ssh/authorized_keys"),
    # Git
    Config.home(".config/git/config", "git/config"),
    Config.home(".config/git/ignore", "git/ignore"),
    Config.home(".config/git/template", "git/template"),
    # Less
    Config.home(".lesskey", "less/lesskey"),
    # Htop
    Config.home(".config/htop/htoprc", "htop/htoprc"),
    # Curl
    Config.home(".config/curlrc", "curl/curlrc"),
    # Postgres
    Config.home(".psqlrc", "postgres/psqlrc"),
    # Gnupg
    Config.home(".gnupg/gpg.conf", "gnupg/gpg.conf"),
    Config.home(".gnupg/gpg-agent.conf", "gnupg/gpg-agent.conf"),
    # Tmux
    Config.home(".tmux.conf", "tmux/tmux.conf"),
    # Helix
    Config.home(".config/helix/config.toml", "helix/config.toml"),
    Config.home(
        ".config/helix/languages.toml",
        "helix/languages.toml",
        templated=True,
    ),
    Config.home(".config/helix/ignore", "helix/ignore"),
    Config.home(
        ".config/helix/themes/cj.toml",
        "helix/theme.toml",
        templated=True,
    ),
    # Ruff
    Config.home(".config/ruff/ruff.toml", "ruff/ruff.toml"),
    # Cspell
    Config.home(".cspell.yml", "cspell/cspell.yml"),
    Config.home(".local/cspell-cj.txt", "cspell/dict-cj.txt"),
    # Paru
    Config.home(".config/paru/paru.conf", "paru/paru.conf"),
    # Hyprland
    Config.home(
        ".config/hypr/hyprland.conf",
        "hypr/hyprland.conf",
        templated=True,
    ),
    Config.home(
        ".config/hypr/hyprlock.conf",
        "hypr/hyprlock.conf",
        templated=True,
    ),
    Config.home(".config/hypr/hypridle.conf", "hypr/hypridle.conf"),
    # Waybar
    Config.home(
        ".config/waybar/config",
        "waybar/config",
        templated=True,
    ),
    Config.home(
        ".config/waybar/style.css",
        "waybar/style.css",
        templated=True,
    ),
    # Foot
    Config.home(
        ".config/foot/foot.ini",
        "foot/foot.ini",
        templated=True,
    ),
    # Mako
    Config.home(
        ".config/mako/config",
        "mako/config",
        templated=True,
    ),
    # Wofi
    Config.home(".config/wofi/config", "wofi/config"),
    Config.home(
        ".config/wofi/style.css",
        "wofi/style.css",
        templated=True,
    ),
    # Fontconfig
    Config.home(".config/fontconfig/fonts.conf", "fontconfig/fonts.conf"),
    # Electron
    Config.home(
        ".config/electron29-flags.conf",
        "electron/electron-flags.conf",
    ),
    Config.home(
        ".config/electron30-flags.conf",
        "electron/electron-flags.conf",
    ),
    # XDG
    Config.home(".config/user-dirs.dirs", "xdg/user-dirs.dirs"),
    # IPython
    Config.home(
        ".ipython/profile_default/ipython_config.py",
        "ipython/ipython_config.py",
    ),
    # Matplotlib
    Config.home(
        ".config/matplotlib/matplotlibrc",
        "matplotlib/matplotlibrc",
    ),
    # XCompose
    Config.home(".XCompose", "x11/xcompose"),
    # Zathura
    Config.home(
        ".config/zathura/zathurarc",
        "zathura/zathurarc",
        templated=True,
    ),
    # Aria2
    Config.home(".config/aria2/aria2.conf", "aria2/aria2.conf"),
    # Mpv
    Config.home(".config/mpv/mpv.conf", "mpv/mpv.conf"),
    Config.home(".config/mpv/input.conf", "mpv/input.conf"),
    # Cargo
    Config.home(".cargo/config.toml", "cargo/config.toml"),
    # Numbat
    Config.home(".config/numbat/config.toml", "numbat/config.toml"),
    # Poetry
    Config.home(".config/pypoetry/config.toml", "pypoetry/config.toml"),
    # Ledger
    Config.home(".ledgerrc", "ledger/ledgerrc"),
]


# Termux-dependent files
if OS_TERMUX:
    CONFIG_FILES += [
        Config.home(
            ".termux/termux.properties",
            "termux/termux.properties",
        ),
        Config.home(
            ".termux/colors.properties",
            "termux/colors.properties",
            templated=True,
        ),
    ]


def main() -> None:
    try:
        action = sys.argv[1]
    except IndexError:
        sys.stderr.write(
            "× CRIT: action is not specified. Should be `install` or `sync-repo`\n"
        )
        exit(1)

    if action == "install":
        render_all(reverse=False)
    elif action == "sync-repo":
        render_all(reverse=True)
    else:
        sys.stderr.write(
            f"× CRIT: unknown action `{action}`. Should be `install` or `sync-repo`\n"
        )
        exit(1)


def render_all(reverse: bool) -> None:
    if reverse:
        process = de_render
    else:
        settings = load_settings()
        process = lambda file: render(file, settings)

    for file in CONFIG_FILES:
        process(file)


def load_settings() -> dict[str, str]:
    settings_path = REPO_ROOT / "settings.toml"

    with settings_path.open("rb") as settings_file:
        settings = tomllib.load(settings_file)

    # Add builtin variables
    settings["home"] = str(Path.home())
    settings["repo"] = str(REPO_ROOT)

    return settings


def render(file: Config, settings: dict[str, str]) -> None:
    sys.stderr.write(f"× INFO: render {file.repo} to {file.host}\n")

    file.host.parent.mkdir(parents=True, exist_ok=True)

    # Load original file
    with file.repo.open("r") as repo_file:
        original_data = repo_file.read()

    # Render template
    if file.templated:
        template = Template(original_data)
        config_data = template.safe_substitute(**settings)
    else:
        config_data = original_data

    # Write final config
    with file.host.open("w") as host_file:
        host_file.write(config_data)


def de_render(file: Config) -> None:
    """
    Copies file from host back to config directory
    """

    sys.stderr.write(f"× INFO: de-render {file.host} to {file.repo}\n")

    file.repo.parent.mkdir(parents=True, exist_ok=True)
    shutil.copy(file.host, file.repo)


if __name__ == "__main__":
    main()
